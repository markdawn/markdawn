
// MainFrm.cpp : CMainFrame 类的实现
//
#include "stdafx.h"
#include "AcousticTherm.h"

#include "MainFrm.h"
#include "TTrendView.h"
#include "AreaAvrgTemperatureView.h"
#include "DisAreaAvrgTInfoView.h"
#include "PositionView.h"
#include "LeakView.h"
#include "SignalTimeView.h"
#include "MainDIsInfoView.h"
#include "IsothermView.h"

#include "AFX.h"
#include "ExitDlg.h"
#include "SysSetDlg.h"


#ifdef _DEBUG
#define new DEBUG_NEW
#endif


#define NOTCPIC   

volatile BOOL gbMainWorkThreadFlag = TRUE;
volatile BOOL gbReceiveDataIsOverFlag = FALSE;//TCP/IP一个周期的数据接收是否完毕
volatile BOOL gbReceiveOnceDataOverFlag = TRUE;//发声一次时数据是否接收完
volatile UINT g_bCurrentSoundDevice = 0;//标记当前发声装置
volatile HANDLE g_hEvent;//数据接收与数据处理线程同步事件
//CCriticalSection m_cs;//临界量
// CMainFrame

IMPLEMENT_DYNCREATE(CMainFrame, CFrameWnd)

BEGIN_MESSAGE_MAP(CMainFrame, CFrameWnd)
	ON_WM_CREATE()
	ON_COMMAND(IDC_AVRGT_BTN, &CMainFrame::OnAvrgtBtn)
	ON_COMMAND(IDC_ISOTHERM_BTN, &CMainFrame::OnIsothermBtn)
	ON_COMMAND(IDC_LEAK_BTN, &CMainFrame::OnLeakBtn)
	ON_COMMAND(IDC_POSITION_BTN, &CMainFrame::OnPositionBtn)
	ON_COMMAND(IDC_TIME_BTN, &CMainFrame::OnTimeBtn)
	ON_COMMAND(IDC_TINFOS_BTN, &CMainFrame::OnTinfosBtn)
	ON_COMMAND(IDC_TTREND_BTN, &CMainFrame::OnTtrendBtn)
	ON_COMMAND(IDC_SET_BTN, &CMainFrame::OnSysSetBtn)
	ON_MESSAGE(WM_PROCESS_MSG,&CMainFrame::DataProcess)
	ON_MESSAGE(WM_GUIDISPLAY_MSG,&CMainFrame::OnGuiDisplay)
	ON_MESSAGE(WM_DATABASE_MSG,&CMainFrame::DatabaseProcess)
	ON_MESSAGE(WM_UPDATE_MSG,&CMainFrame::OnUpdataCommProcess)
//	ON_MESSAGE(WM_START_MSG,&CMainFrame::OnStartReceiveDataProcess)
	ON_MESSAGE(WM_CALGRID_MSG,&CMainFrame::OnCalGridData)
	ON_MESSAGE(WM_CATCHCOMM_MSG,&CMainFrame::OnCatchCommState)
	ON_WM_CLOSE()
END_MESSAGE_MAP()

static UINT indicators[] =
{
	ID_SEPARATOR,           // 状态行指示器
	ID_INDICATOR_NAME,
	ID_INDICATOR_ALARM_STATUS,//报警
	ID_INDICATOR_COMMUNICATE_STATUS,//通信故障
	ID_INDICATOR_DATE,
	ID_INDICATOR_WEEK,
	ID_INDICATOR_TIME,
};

// CMainFrame 构造/析构

CMainFrame::CMainFrame()
	: m_fPingPongBuffer(NULL)
	, m_fReadBufferPointer(NULL)
	, m_bPingPongBufferFlag(FALSE)
	, m_fWriteBufferPointer(NULL)
	, m_pathAverageT(NULL)
	, m_iAreaAverageT(NULL)
	, m_tOldTime(0)
	, m_strMySqlUserID(_T(""))
	, m_strMySqlPassword(_T(""))
	, m_strMySqlName(_T(""))
	, m_iMySqlPort(0)
	, m_bSystemFaultFlag(false)
	, m_pCalTGridData(NULL)
	,m_strExitPassword(_T(""))
{
	// TODO: 在此添加成员初始化代码
	gbMainWorkThreadFlag = TRUE;

	int i = 0;
	for (i = 0;i<INTERFACE_NUM;i++)
	{
		m_pViews[i] = NULL;
	}
	m_nCurViewStatus = MAINDIS_VIEW;
	m_currentMsg = WM_MAINDIS_MSG;
	m_hWorkThread = INVALID_HANDLE_VALUE;
//	m_hReceiveThread = INVALID_HANDLE_VALUE;
	m_hGuiThread = INVALID_HANDLE_VALUE;
	m_hCalGridThread = INVALID_HANDLE_VALUE;
	m_hCatchTheComm = INVALID_HANDLE_VALUE;
    //创建Ping-Pong缓冲区
	int j = 0;
	int k = 0;
	int m = 0;
	m_fPingPongBuffer = new int***[PINGPONG];
	for (i = 0;i<PINGPONG;i++)
	{
		m_fPingPongBuffer[i] = new int**[SOUNDDEV_NUM];
		for (j=0;j<SOUNDDEV_NUM;j++)
		{
			m_fPingPongBuffer[i][j]=new int*[ARM_NUM];
			for (k= 0;k<ARM_NUM;k++)
			{
				m_fPingPongBuffer[i][j][k]=new int[PERMODULE_DATA_LENTH];
			}
		}
	}
	//初始化缓冲区
	for (i = 0;i<PINGPONG;i++)
	{
		for (j=0;j<SOUNDDEV_NUM;j++)
		{
			for (k= 0;k<ARM_NUM;k++)
			{
				for(m = 0;m<PERMODULE_DATA_LENTH;m++)
				{
					m_fPingPongBuffer[i][j][k][m]=0.0f;
				}
			}
		}
	}
	//网格数据缓冲区
	m_pCalTGridData = new float*[GRID_ROW_NUM];
	for (i = 0; i<GRID_ROW_NUM;i++)
	{
		 m_pCalTGridData[i] = new float[GRID_COLUMN_NUM];
	}
	for (i = 0;i<GRID_ROW_NUM;i++)
	{
		for (j=0;j<GRID_COLUMN_NUM;j++)
		{
			m_pCalTGridData[i][j]=0.0f;
		}
	}
	m_pfCurBufferPointer = NULL;
	//路径平均温度缓冲区
	m_pathAverageT = new CPathAverageT[PATH_NUM];
	//区域平均温度缓冲区
	m_iAreaAverageT = new  UINT[AREA_BLOCK_NUM];
	memset(m_iAreaAverageT,0,AREA_BLOCK_NUM*sizeof(UINT));

	m_ipWord = new DWORD[ARM_NUM];
	memset(m_ipWord,0,ARM_NUM*sizeof(DWORD));

	m_iPort = new u_short[ARM_NUM];
	memset(m_iPort,0,ARM_NUM*sizeof(u_short));

	
	memset(&m_gridDataInfo,0,sizeof(GridBaiscInfo));

	m_ManageClient = new CManageClient[ARM_NUM];
	m_iCurrentFaultDev = 0;
//	::InitializeCriticalSection(&m_csOne);
//	::InitializeCriticalSection(&m_csTwo);

	for (int i = 0;i<ARM_NUM;i++)
	{
		m_bPerArmConnState[i] = TRUE;
	}
}

CMainFrame::~CMainFrame()
{

	Sleep(200);
	EndThreadWork(m_hWorkThread,1000);
//	EndThreadWork(m_hReceiveThread,1000);
	EndThreadWork(m_hGuiThread,1000);
	EndThreadWork(m_hCalGridThread,1000);
	EndThreadWork(m_hCatchTheComm,1000);
	Sleep(500);
	if (m_ManageClient)
	{
		delete [] m_ManageClient;
		m_ManageClient = NULL;
	}

	m_hWorkThread = INVALID_HANDLE_VALUE;
//	m_hReceiveThread = INVALID_HANDLE_VALUE;
	m_hGuiThread = INVALID_HANDLE_VALUE;
	m_hCalGridThread = INVALID_HANDLE_VALUE;
	m_hCatchTheComm = INVALID_HANDLE_VALUE;

	int i = 0;
	int j  = 0;
	int k = 0;
	for (i = 0;i<PINGPONG;i++)
	{
		for (j=0;j<SOUNDDEV_NUM;j++)
		{
			for (k= 0;k<ARM_NUM;k++)
			{
				delete m_fPingPongBuffer[i][j][k];
			}
			delete m_fPingPongBuffer[i][j];
		}
		delete m_fPingPongBuffer[i];
	}
	delete[] m_fPingPongBuffer;
	
	delete[] m_iAreaAverageT;

	for (int i = 0;i<GRID_ROW_NUM;i++)
	{
		delete[] m_pCalTGridData[i];
	}
	delete[] m_pCalTGridData;

    m_fPingPongBuffer = NULL;
	m_fPingPongBuffer = NULL;
	if (m_pathAverageT )
	{
		delete[] m_pathAverageT;
		m_pathAverageT = NULL;
	}
	
	m_iAreaAverageT = NULL;
	m_pCalTGridData = NULL;
	if (m_ipWord)
	{
		delete [] m_ipWord;
		m_ipWord = NULL;
	}
	if (m_iPort) 
	{
		delete [] m_iPort;
		m_iPort = NULL;
	}
	//关闭线程
//	gbMainWorkThreadFlag = FALSE;//用变量来控制线程的自动结束，线程结束的最好方式
	WSACleanup(); //清除套接字资源
}

int CMainFrame::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	////////////////////////////读ini配置文件:系统环境配置////////////////////////////////////////////////////////////
	
	if (ReadSystemIniConfig()==ERROR_READINI)
	{
		//记录下来，并显示
		AfxMessageBox(_T("读取系统配置文件失败,请重新启动程序!")); 
	}
		////////////////////////////初始化并连MySQL接数据库////////////////////////////////////////////////////////////
	//初始化mysql
	if (!m_OperateDB.InitMysql(&m_mysql))
	{
		AfxMessageBox(_T("初始化数据库错误!"));
	}
	//连接mysql
	if (!m_OperateDB.ConnectMysql(&m_mysql,(LPSTR)(LPCTSTR)m_strMySqlUserID,(LPSTR)(LPCTSTR) m_strMySqlPassword,(LPSTR)(LPCTSTR)m_strMySqlName,m_iMySqlPort))
	{
		AfxMessageBox(_T("连接数据库错误!"));
	}
	//读取系统退出密码
	m_strExitPassword = ReadSysExitPass(m_mysql);
	if (m_strExitPassword == _T("error"))
	{
		AfxMessageBox(_T("读取系统密码错误！"));
	}


	if (CFrameWnd::OnCreate(lpCreateStruct) == -1)
		return -1;

	/*if (!m_toolDlgBar.Create(this,IDD_TOOL_DLGBAR,WS_CHILD | WS_VISIBLE | CBRS_TOP,IDD_TOOL_DLGBAR))
	{
		TRACE0("未能创建工具栏\n");
		return -1;      // fail to create
	}*/

	//状态栏设置
/*	if(!m_wndStatusBar.Create(this) ||!m_wndStatusBar.SetIndicators(indicators,sizeof(indicators)/sizeof(UINT)))
	{
		TRACE0("Failed to create status bar\n");
		return -1;      // fail to create
	}

	m_wndStatusBar.SetPaneInfo(1, ID_INDICATOR_NAME, SBPS_POPOUT|SBPS_NOBORDERS, 150);
	m_wndStatusBar.SetPaneInfo(2, ID_INDICATOR_ALARM_STATUS, SBPS_POPOUT|SBPS_NOBORDERS, 150);
	m_wndStatusBar.SetPaneInfo(3, ID_INDICATOR_COMMUNICATE_STATUS, SBPS_POPOUT|SBPS_NOBORDERS, 150);
	m_wndStatusBar.SetPaneInfo(4, ID_INDICATOR_DATE, SBPS_POPOUT|SBPS_NOBORDERS, 80);
	m_wndStatusBar.SetPaneInfo(5, ID_INDICATOR_WEEK, SBPS_POPOUT|SBPS_NOBORDERS, 80);
	m_wndStatusBar.SetPaneInfo(6, ID_INDICATOR_TIME, SBPS_POPOUT|SBPS_NOBORDERS, 50);


//	m_wndStatusBar.GetStatusBarCtrl().SetBkColor(RGB(20,128,190)); //设置状态栏背景
	m_wndStatusBar.GetStatusBarCtrl().SetMinHeight(40*YCOFF); //设置状态栏高度
	m_wndStatusBar.GetStatusBarCtrl().SetSimple(FALSE);
*/
	CRect rect(0,0,1360,1000); 
	RecalcLayout(); 

//	m_pViews[0] = pActiveView;
	m_pViews[1] = (CView*) new CIsothermView;
	m_pViews[2] = (CView*) new CAreaAvrgTemperatureView;
	m_pViews[3] = (CView*) new CTTrendView;
	m_pViews[4] = (CView*) new CDisAreaAvrgTInfoView;
	m_pViews[5] = (CView*) new CPositionView;
	m_pViews[6] = (CView*) new CSignalTimeView;
	m_pViews[7] = (CView*) new CLeakView;

	UINT viewID[INTERFACE_NUM] = {0};
	CRect rectP(0, 0, 0, 0); // gets resized later
	viewID[0] =  AFX_IDW_PANE_FIRST;

	for ( int nView=1; nView<INTERFACE_NUM; nView++ )
	{
		viewID[nView] = AFX_IDW_PANE_FIRST +nView;
		m_pViews[nView]->Create(NULL, NULL, AFX_WS_DEFAULT_VIEW& ~WS_VISIBLE,rect, this, viewID[nView], NULL);
	}

	RECT rc;
	SystemParametersInfo(SPI_GETWORKAREA, 0, &rc, 0);
	MoveWindow(rc.left, rc.top, rc.right - rc.left, rc.bottom - rc.top);
/*
	CMenu* pMenu=GetSystemMenu(false);
	UINT nID=pMenu->GetMenuItemID(pMenu->GetMenuItemCount()-1);
	pMenu->EnableMenuItem(nID,MF_DISABLED);
	
*/
	SetMenu(NULL);
	//创建workThreak线程
	m_hWorkThread =StartThreadWork(this,WorkThread);
	if (m_hWorkThread == INVALID_HANDLE_VALUE)
	{
		AfxMessageBox(_T("开启工作线程失败"));
	}

	//创建界面数据更新线程
	m_hGuiThread =StartThreadWork(this,UpdateGuiThread);
	if (m_hGuiThread == INVALID_HANDLE_VALUE)
	{
		AfxMessageBox(_T("开启界面更新线程失败"));
	}

	//创建温度场栅格数据计算线程
	m_hCalGridThread =StartThreadWork(this,CalGridDataThread);
	if (m_hCalGridThread == INVALID_HANDLE_VALUE)
	{
		AfxMessageBox(_T("开启计算温度场栅格数据线程失败"));
	}

	
	m_hCatchTheComm =StartThreadWork(this,CatchTheCommState);
	if (m_hCatchTheComm == INVALID_HANDLE_VALUE)
	{
		AfxMessageBox(_T("开启监视通信线程失败！"));
	}

	//开启TCP/IP通信线程
/*	if (InitSocket() == FALSE)
	{
		AfxMessageBox(_T("初始化网络通信资源出错,请重启程序!"));
		return -1;
	}
	BOOL bRes = FALSE;

	for(int i = 0;i < ARM_NUM;i++)
	{
		bRes = m_ManageClient[i].CreateSocket(m_ipWord[i],m_iPort[i],1);
		if (bRes == FALSE)
		{
			m_bPerArmConnState[i] = FALSE;
			CString strError;
			strError.Format(_T("连接第%d个通信模块失败"),i+1);
			AfxMessageBox(strError);
			continue;
		}	
		m_ManageClient[i].SetTheModuleID(i);
		bRes = m_ManageClient[i].WatchCommunicate(); //启动数据接收线程
		if (bRes == FALSE)
		{
			m_bPerArmConnState[i] = FALSE;
			CString strError;
			strError.Format(_T("启动与第%d个通信模块通信失败!"),i+1);
			AfxMessageBox(strError);
			continue;
		}	
	}
	*/
	ResumeThreadWork(m_hWorkThread); //启动工作线程
	ResumeThreadWork(m_hGuiThread);//启动界面更新线程
	ResumeThreadWork(m_hCalGridThread);//启动网格数据接收线程
	ResumeThreadWork(m_hCatchTheComm); //启动通信监视线程
//	SendMessage(WM_START_MSG,0,0); //开始启动发声设备以及数据采集与传输

	g_hEvent = CreateEvent(NULL,FALSE,TRUE,NULL); //设置为自动事件，初始化为有信号状态
	SetThreadPriority(m_hGuiThread,THREAD_PRIORITY_ABOVE_NORMAL);
	return 0;
}

BOOL CMainFrame::PreCreateWindow(CREATESTRUCT& cs)
{
	if( !CFrameWnd::PreCreateWindow(cs) )
		return FALSE;
	// TODO: 在此处通过修改
	//  CREATESTRUCT cs 来修改窗口类或样式

	cs.style = WS_OVERLAPPED | WS_CAPTION | FWS_ADDTOTITLE
		| WS_THICKFRAME | WS_MINIMIZEBOX | WS_MAXIMIZEBOX | WS_MAXIMIZE | WS_SYSMENU;
	cs.style |= WS_CLIPSIBLINGS | WS_CLIPCHILDREN;
	cs.style &= ~WS_MAXIMIZEBOX;	
//	cs.style &= ~WS_MINIMIZEBOX;	
//	cs.style=cs.style&~WS_SYSMENU;
	cs.style &= ~WS_SIZEBOX;//去掉窗口右下角的三根斜杠
	return TRUE;
}

// CMainFrame 诊断

#ifdef _DEBUG
void CMainFrame::AssertValid() const
{
	CFrameWnd::AssertValid();
}

void CMainFrame::Dump(CDumpContext& dc) const
{
	CFrameWnd::Dump(dc);
}
#endif //_DEBUG

//////////////////////////////////////////////////线程函数/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//数据处理线程
DWORD WINAPI WorkThread( LPVOID lpParam ) 
{
	CMainFrame *pWnd=(CMainFrame *)lpParam;
	if (!pWnd)
	{
		return -1;
	}
	Sleep(200);
	
	while(gbMainWorkThreadFlag)
	{
		if (gbReceiveDataIsOverFlag == TRUE)
		{
			gbReceiveDataIsOverFlag = FALSE;
			//获取系统时间
			time_t msgTime;
			time(&msgTime);
			//		::EnterCriticalSection(&pWnd->m_csTwo);
			//数据处理
			::SendMessage(pWnd->GetSafeHwnd(),WM_PROCESS_MSG,0,(LPARAM)msgTime); //数据处理
			::SendMessage(pWnd->GetSafeHwnd(),WM_DATABASE_MSG,1,(LPARAM)msgTime);//数据库操作
			//			::LeaveCriticalSection(&pWnd->m_csTwo);
			::SetEvent(g_hEvent);
			::Sleep(200);
//			TRACE0(_T("WorkThread\n"));
		}
		else
			Sleep(2000);
	}
	return 0;
}

//界面数据更新线程
DWORD WINAPI UpdateGuiThread( LPVOID lpParam ) 
{
	CMainFrame *pWnd=(CMainFrame *)lpParam;
	if (!pWnd)
	{
		return -1;
	}
	while(gbMainWorkThreadFlag)
	{
		//获取系统时间
		time_t msgTime;
		time(&msgTime);
		::SendMessage(pWnd->GetSafeHwnd(),WM_GUIDISPLAY_MSG,(WPARAM)pWnd,(LPARAM)msgTime);//界面显示
		::Sleep(100);
	}
	return 0;
}

//计算温度场网格数据线程
	DWORD WINAPI CalGridDataThread( LPVOID lpParam ) 
{
	CMainFrame *pWnd=(CMainFrame *)lpParam;
	if (!pWnd)
	{
		return -1;
	}
	while(gbMainWorkThreadFlag)
	{
		//获取系统时间
		time_t msgTime;
		time(&msgTime);
		::SendMessage(pWnd->GetSafeHwnd(),WM_CALGRID_MSG,(WPARAM)pWnd,(LPARAM)msgTime);
		::Sleep(200);
	}
	return 0;
}

//通信状态监视线程
DWORD WINAPI CatchTheCommState( LPVOID lpParam ) 
{
	CMainFrame *pWnd=(CMainFrame *)lpParam;
	if (!pWnd)
	{
		return -1;
	}
//	while(gbMainWorkThreadFlag)
	{
		time_t msgTime;
		time(&msgTime);
	//	::SendMessage(pWnd->GetSafeHwnd(),WM_CATCHCOMM_MSG,(WPARAM)pWnd,(LPARAM)msgTime);

		pWnd->OnCatchCommState((WPARAM)pWnd,(LPARAM)msgTime);
		Sleep(2000);
	}
	
	return 0;
}


///////////////////////////////////////////////////////////线程处理函数////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//界面显示及更新  (WPARAM)pWnd,(LPARAM)msgTime
LRESULT CMainFrame::OnGuiDisplay(WPARAM wparam,LPARAM lparam)
{
	CMainFrame *pWnd=(CMainFrame *)wparam;
	if (!pWnd)
	{
		return -1;
	}
	
	switch(m_currentMsg)
	{
	case WM_MAINDIS_MSG ://主界面
		if (m_pViews[0])
		{
			m_pViews[0]->SendMessage(m_currentMsg,wparam,lparam);
		}
		break;
	case WM_ISOTHERM_MSG :// 温度场:温度网格数据、网格数据信息
		if (m_pViews[1])
		{
			m_pViews[1]->SendMessage(m_currentMsg,WPARAM(pWnd->GetGridData()),(LPARAM)pWnd->GetGridDataInfo());
		}
		break;
	case WM_AREAARVGT_MSG://区域平均温度：区域平均温度
		if (m_pViews[2])
		{
			m_pViews[2]->SendMessage(m_currentMsg,WPARAM(pWnd->GetAreaAvrgTValue()),lparam);
		}
		break;
	case WM_TTREND_MSG ://温度趋势：数据库句柄
		if (m_pViews[3])
		{
			m_pViews[3]->SendMessage(m_currentMsg,(WPARAM)&(pWnd->GetMySQLHandle()),lparam);
		}
		break;
	case WM_AREATINFO_MSG://温度信息统计
		if (m_pViews[4])
		{
			m_pViews[4]->SendMessage(m_currentMsg,wparam,lparam);
		}
		break;
	case WM_POSITION_MSG ://测点位置
		if (m_pViews[5])
		{
			m_pViews[5]->SendMessage(m_currentMsg,wparam,lparam);
		}
		break;
	case WM_TIME_MSG://时域信号：原始数据
		if (m_pViews[6])
		{
			m_pViews[6]->SendMessage(m_currentMsg,WPARAM(pWnd->GetAcousticData()),lparam);
		}
		break;
	case WM_LEAK_MSG://泄漏
		if (m_pViews[7])
		{
			m_pViews[7]->SendMessage(m_currentMsg,wparam,lparam);
		}
		break;
	}
//	SetStatusBar(wparam,lparam);  //状态栏
	return 0;
}

//温度场重构计算
LRESULT CMainFrame::DataProcess(WPARAM wparam,LPARAM lparam)
{

	//计算区域平均温度-----重构算法
	BOOL bRet = FALSE;
	bRet = m_RebuildAreaT.CalAreaAvrageT(m_pfCurBufferPointer,m_iAreaAverageT,PATH_NUM,AREA_BLOCK_NUM);
	if (bRet==FALSE)
	{
	//	MessageBox(_T("计算区域温度失败"));
	}
	return 0;
}

//温度场网格化数据
LRESULT CMainFrame::OnCalGridData(WPARAM wparam,LPARAM lparam)
{
	
	//计算网格数据
	BOOL bRet=m_RebuildAreaT.CalTGridData(m_iAreaAverageT,m_pCalTGridData,AREA_BLOCK_NUM,&m_gridDataInfo);
	if (bRet==FALSE)
	{
		MessageBox(_T("计算温度场数据失败"));
	}
	return 0;
}

BOOL CMainFrame::IsAllSocketConn()
{
	int i = 0;
	for (i = 0;i<ARM_NUM;i++)
	{
		if (!(m_ManageClient[i].IsOpen()))
		{
			m_iCurrentFaultDev = i;
			return FALSE;
		}
	}
	return TRUE;
}

BOOL CMainFrame::IsAllRecvOver()
{
	int i = 0;
	for (i = 0;i<ARM_NUM;i++)
	{
		if (!(m_ManageClient[i].IsRecvOver()))
		{
			return FALSE;
		}
	}
	return TRUE;
}

//通信状态监控
LRESULT CMainFrame::OnCatchCommState(WPARAM wparam,LPARAM lparam)
{
	m_bConnState = TRUE;
	while(gbMainWorkThreadFlag)
	{
		Sleep(1000);
		
		m_bConnState =IsAllSocketConn(); //检查连接是否有断开情况
		DWORD dwRes = 0;
		if (!m_bConnState)
		{
			//ARM已经断开连接了，重新连接ARM
			BOOL bRes = m_ManageClient[m_iCurrentFaultDev].CreateSocket(m_ipWord[m_iCurrentFaultDev],m_iPort[m_iCurrentFaultDev],1);
			if (bRes == FALSE)
			{
				CString strError;
				strError.Format(_T("连接第%d个通信模块失败"),m_iCurrentFaultDev+1);
		//		AfxMessageBox(strError);
				m_bPerArmConnState[m_iCurrentFaultDev] = FALSE;
				continue;
			}	
			m_bPerArmConnState[m_iCurrentFaultDev] = TRUE;
		}
		else
		{
			if (IsAllRecvOver()) //一次发声数据接收完毕
			{
				//当一次8个ARM数据接收完毕
				if (g_bCurrentSoundDevice == 0)
				{
					//当所有ARM都发声完毕
					dwRes = WaitForSingleObject(g_hEvent,2000);//等待数据处理线程数据处理完毕事件2s
					if (dwRes != WAIT_OBJECT_0)
					{
						//如果没有同步信号，继续等待
						continue;
					}
					SwapBufferPointer();//交换缓冲区
					gbReceiveDataIsOverFlag = TRUE;//数据线程可以开始
					Sleep(200);
				}
				
				BOOL bRes = StartADeviceSound(g_bCurrentSoundDevice);//开始发声
				if (bRes == FALSE)
				{
					//发声失败
					m_ManageClient[g_bCurrentSoundDevice].CloseCommunicate();
					continue;
				}
				
				TRACE1(_T("Current Sound Device %d\n"),g_bCurrentSoundDevice+1);
				g_bCurrentSoundDevice++;
				if (g_bCurrentSoundDevice>=ARM_NUM)
				{
					g_bCurrentSoundDevice = 0;
				}
			}
		}
	}
	return 0;
}


///////////////////////////////////////////////////////////声波数据接收及通讯状态监控///////////////////////////////////////////////////////////////////////////////////////////
void CMainFrame::SwapBufferPointer()
{
	m_pfCurBufferPointer = m_fPingPongBuffer[m_bPingPongBufferFlag];//指示当前使用的全局缓冲区
	m_bPingPongBufferFlag = !m_bPingPongBufferFlag; //交换数据存储指针
}

BOOL CMainFrame::StartADeviceSound(UINT iOrder)
{
	if (iOrder <0 || iOrder >= ARM_NUM)
	{
		return FALSE;
	}
	int res = m_ManageClient[iOrder].OnSendSampleCmd();
//	Sleep(1000);
	if (res > 0)
	{
		for (int i = 0; i < ARM_NUM;i++)
		{
			m_ManageClient[i].SetRecvDataOver(FALSE);//数据没有接收完毕
			m_ManageClient[i].SetStartTransData(TRUE);//数据开始接收
		}
		return TRUE;
	}

	return FALSE;
}

//ucDataIn--data from socket,    ucBuffer--data buffer,  offset--data's offset in buffer
void CMainFrame::CopyDataIntoGlobalBuffer(LPBYTE ucDataIn,int* pfBuffer,int iNumOfData,int iBufferSize)
{
	if (iNumOfData<0 || iNumOfData>TOTLA_LENTH || ucDataIn == NULL)
	{
		return;
	}
	if (iBufferSize*2 != iNumOfData) //缓冲区应该是输入数据的两倍大小
	{
		return;
	}

	unsigned short uData = 0;
	int i = 0;
	int j = 0;
	for(i = 0;i<iBufferSize;i++)
	{
		//将两个字节组合成一个数据
		uData = (ucDataIn[j]<<8)&0xFF00 | ucDataIn[j+1]&0x00FF;//假设高位在前
		//将信号数据转换为电压数据
	//	pfBuffer[i]= (float)uData*vCoff;
		pfBuffer[i]= (int)uData;
		j = j+2;
	}
}

//启动数据接收线程
BOOL CMainFrame::OnStartReceiveDataProcess()
{
	//发送数据采集命令，收到数据采集完毕命令后，设置开始传输数据标记
	int i = 0;

	Sleep(200);
	if (gbReceiveOnceDataOverFlag)
	{
		gbReceiveOnceDataOverFlag = FALSE;
		if (g_bCurrentSoundDevice>=ARM_NUM)
		{
			g_bCurrentSoundDevice = 0;
			return TRUE;
		}
		BOOL bRes = StartADeviceSound(g_bCurrentSoundDevice);
		TRACE1(_T("Current Sound Device %d\n"),g_bCurrentSoundDevice+1);
		g_bCurrentSoundDevice++;
		if (bRes == FALSE)
		{
			return FALSE;
		}
	}

	return TRUE;
}
//更新TCP/IP通信状态
LRESULT CMainFrame::OnUpdataCommProcess(WPARAM wparam,LPARAM lparam)
{
	UINT uEvent = (UINT)wparam;
	UINT uArmModule = (UINT)lparam;
	if (uArmModule < 0 || uArmModule >= ARM_NUM) 
	{
		return -1;
	}

	UINT i = 0;
	BOOL bRes = 0;
	switch( uEvent )
	{
	case EVT_CONSUCCESS:
		//	AppendMessage( _T("Connection Established\r\n") );
		break;
	case EVT_CONFAILURE:
		//	AppendMessage( _T("Connection Failed\r\n") );
		break;
	case EVT_CONDROP:
		//	AppendMessage( _T("Connection Abandonned\r\n") );
		m_iCurrentFaultDev = uArmModule;
		break;
	case EVT_ZEROLENGTH:
		//	AppendMessage( _T("Zero Length Message\r\n") );
		break;
	case EVT_TRANSOVER: //数据已经接收完毕，将数据装载进Ping-Pong缓冲区
		//(1)将数据存入Ping-Pong缓冲区内
		CopyDataIntoGlobalBuffer(m_ManageClient[uArmModule].GetDataBuffer(),m_fPingPongBuffer[m_bPingPongBufferFlag][g_bCurrentSoundDevice][uArmModule],TOTLA_LENTH,PERMODULE_DATA_LENTH);
		TRACE1(_T("Current ARM %d\n"),lparam+1);

	//	TRACE0(_T("RevThread\n"));
		break;
	default:
		TRACE("Unknown Socket event\n");
		break;
	}

	return 0;
}

///////////////////////////////////////////////////////////////////////界面切换///////////////////////////////////////////////////////////////////////////////////////////////////////
// CMainFrame 消息处理程序
//区域平均温度界面
void CMainFrame::OnAvrgtBtn()
{
	// TODO: Add your command handler code here
	SelView(AREAAVRGT_VIEW);
	m_currentMsg = WM_AREAARVGT_MSG;
}

//等温线界面
void CMainFrame::OnIsothermBtn()
{
	// TODO: Add your command handler code here
	SelView(ISOTHERM_VIEW);
	m_currentMsg = WM_ISOTHERM_MSG;

}

//泄漏界面
void CMainFrame::OnLeakBtn()
{
	// TODO: Add your command handler code here
	SelView(LEAK_VIEW);
	m_currentMsg = WM_LEAK_MSG;

	
}

//路径和测点位置界面
void CMainFrame::OnPositionBtn()
{
	// TODO: Add your command handler code here
	SelView(POSITION_VIEW);
	m_currentMsg = WM_POSITION_MSG;
}

//时域界面
void CMainFrame::OnTimeBtn()
{
	// TODO: Add your command handler code here
	SelView(TIME_VIEW);
	m_currentMsg = WM_TIME_MSG;
}

//温度信息统计界面
void CMainFrame::OnTinfosBtn()
{
	// TODO: Add your command handler code here
	SelView(AVRGTINFO_VIEW);
	m_currentMsg = WM_AREATINFO_MSG;
}

//平均温度趋势界面
void CMainFrame::OnTtrendBtn()
{
	// TODO: Add your command handler code here
	SelView(TTREND_VIEW);
	m_currentMsg = WM_TTREND_MSG;
}

void CMainFrame::OnSysSetBtn()
{
	// TODO: Add your command handler code here
	CSysSetDlg setDlg;
	if (setDlg.DoModal()==IDOK)
	{
		SaveIPAndPortSetting(m_ipWord,m_iPort,ARM_NUM);
	}
}

BOOL CMainFrame::SelView(VIEW_STATUS nView)
{
	CView* pViewAdd;
	CView* pViewRemove;
	CDocument* pDoc = GetActiveDocument();

	if(nView == m_nCurViewStatus )
		return FALSE;
	switch(nView)
	{
		case MAINDIS_VIEW:
		pViewAdd = m_pViews[0] ;
		pViewRemove = m_pViews[m_nCurViewStatus-1];
		m_nCurViewStatus= MAINDIS_VIEW;  
		break;
		case ISOTHERM_VIEW:
			pViewAdd = m_pViews[1] ;
			pViewRemove = m_pViews[m_nCurViewStatus-1];
			m_nCurViewStatus= ISOTHERM_VIEW;  
			break;
		case AREAAVRGT_VIEW:
			pViewAdd = m_pViews[2] ;
			pViewRemove = m_pViews[m_nCurViewStatus-1];
			m_nCurViewStatus= AREAAVRGT_VIEW;  
			break;
		case TTREND_VIEW:
			pViewAdd = m_pViews[3] ;
			pViewRemove = m_pViews[m_nCurViewStatus-1];
			m_nCurViewStatus= TTREND_VIEW;  
			break;
		case AVRGTINFO_VIEW:
			pViewAdd = m_pViews[4] ;
			pViewRemove = m_pViews[m_nCurViewStatus-1];
			m_nCurViewStatus= AVRGTINFO_VIEW;  
			break;
		case POSITION_VIEW:
			pViewAdd = m_pViews[5] ;
			pViewRemove = m_pViews[m_nCurViewStatus-1];
			m_nCurViewStatus= POSITION_VIEW;  
			break;
		case TIME_VIEW:
			pViewAdd = m_pViews[6] ;
			pViewRemove = m_pViews[m_nCurViewStatus-1];
			m_nCurViewStatus= TIME_VIEW;  
			break;
		case LEAK_VIEW:
			pViewAdd = m_pViews[7] ;
			pViewRemove = m_pViews[m_nCurViewStatus-1];
			m_nCurViewStatus= LEAK_VIEW;  
			break;
		default:
			break;
	}

	// 将活动视的child id设置为AFX_IDW_PANE_FIRST
	// 将其它视设置为AFX_IDW_PANE_FIRST以外的值，
	// 这样当调用CFrameWnd::RecalcLayout重新布局窗口时，
	// 才会得到正确的视
	int nSwitchChildID = pViewAdd->GetDlgCtrlID();
	pViewAdd->SetDlgCtrlID(AFX_IDW_PANE_FIRST);
	pViewRemove->SetDlgCtrlID(nSwitchChildID);
	// 显示活动视而隐藏非活动视
	pViewAdd->ShowWindow(SW_SHOW);
	pViewRemove->ShowWindow(SW_HIDE);
	// 将新的活动视连接到文档，并断开原来的视与文档的连接
	pDoc->AddView(pViewAdd);
	pDoc->RemoveView(pViewRemove);
	SetActiveView(pViewAdd);
	RecalcLayout();

	return TRUE;
}


/////////////////////////////////////////////////////////////////数据库操作///////////////////////////////////////////////////////////////////////////////////////////
// 初始化MySQL数据库
ERROR_MYSQL CMainFrame::MySQLInit(char* userID, char* password, char* dbName, unsigned int port)
{
	/*初始化MySql数据库*/
	if (mysql_init (&m_mysql)==NULL)
	{
		return ERROR_MYSQL_INIT;
	}

	if(!mysql_real_connect(&m_mysql,_T("localhost"),userID,password,dbName,port,NULL,0))
	{ 
		return  ERROR_MYSQL_CONNECT;
	}
	return NO_MYSQL_ERROR;
}

//数据库操作
LRESULT CMainFrame::DatabaseProcess(WPARAM wparam,LPARAM lparam)
{
	//写数据库和删除数据库功能
	UINT* iAreaAvrgT;
	iAreaAvrgT = GetAreaAvrgTValue();
	RecordAreaT((WPARAM)iAreaAvrgT,lparam);
	DeleteAreaTData(100,lparam);
	m_tOldTime  =  lparam;
	return 0;
}

// 记录区域平均温度：一分钟记录一次，
LRESULT CMainFrame::RecordAreaT(WPARAM wparam, LPARAM lparam)
{
	CTime timeTmp(lparam);
	UINT* pBuffer = (UINT*)wparam;
	if (timeTmp.GetMinute()!=m_tOldTime.GetMinute() && timeTmp.GetSecond()==0)
	{
		CString m_timestr;
		m_timestr=timeTmp.Format("%Y%m%d %H:%M:%S");
		CString strSQL;
    	strSQL.Format(_T("insert into areaavrgtvalue(TimeList,TimeParam,Area1AvrgTValue,Area2AvrgTValue,Area3AvrgTValue,Area4AvrgTValue,  \
					  Area5AvrgTValue,Area6AvrgTValue,Area7AvrgTValue,Area8AvrgTValue,Area9AvrgTValue,Area10AvrgTValue,\
					  Area11AvrgTValue,Area12AvrgTValue,Area13AvrgTValue,Area14AvrgTValue,Area15AvrgTValue,Area16AvrgTValue) \
					  values(\'%s\',\'%d\',\'%d\',\'%d\',\'%d\',\'%d\',\'%d\',\'%d\',\'%d\',\'%d\',\'%d\',\'%d\',\'%d\',\'%d\',\'%d\',\'%d\',\'%d\',\'%d\')"),
					 m_timestr, lparam,pBuffer[0],pBuffer[1],pBuffer[2],pBuffer[3],pBuffer[4],pBuffer[5],pBuffer[6],pBuffer[7],pBuffer[8],pBuffer[9],\
					 pBuffer[10],pBuffer[11],pBuffer[12],pBuffer[13],pBuffer[14],pBuffer[15]);

		if(mysql_real_query(&m_mysql,(char*)(LPCTSTR)strSQL,(UINT)strSQL.GetLength())!=0)
		{ 
			AfxMessageBox(_T("增添失败")); 
		}
	}
	return 0;
}

// 删除平均温度数据:wparam--传递数据存储周期，lparam--当前系统时间
LRESULT CMainFrame::DeleteAreaTData(WPARAM wparam, LPARAM lparam)
{
	CTime timeTmp(lparam);
	if((timeTmp.GetMinute()%5==0)&&(timeTmp.GetSecond()==0)) //5分钟检查一次
	{
		CTimeSpan tsTemp((UINT)wparam,20,0,0);//平均温度数据保存周期（天，小时，分，秒）
		time_t  theDelTime = (time_t)lparam - tsTemp.GetTotalSeconds();
		  /****************读取平均温度第一行数据保存的时间*************************/
		char *ch_query;
		ch_query = "select * from areaavrgtvalue limit 0,1";  //查询第一行
		if(mysql_real_query(&m_mysql,ch_query,(UINT)strlen(ch_query))!=0) //执行查询
		{ 
			AfxMessageBox(_T("数据库中表格出错")); 
		}

		CString str;
		MYSQL_RES *result;
		MYSQL_ROW row;
		if(!(result=mysql_use_result(&m_mysql)))//初始化检索
		{ 
			AfxMessageBox(_T("读取数据集失败")); 		
		}
		int test =	mysql_num_fields(result); //获取列数量
		time_t theFirstRowTime = 0;
		while(row=mysql_fetch_row(result)){  //获取每一行行指针    
			theFirstRowTime = atoi(row[1]);//获取第二列信息，即平均温度数据存储的时间
		}
		mysql_free_result(result);

	   /****************删除数据*************************/
		if (theDelTime>=theFirstRowTime)
		{
			//执行删除
			CString sDelete;
			sDelete.Format(_T("delete from areaavrgtvalue where TimeParam <= %d"),theDelTime);
			ch_query =   (LPSTR)(LPCTSTR)sDelete.GetBuffer(sDelete.GetLength());
			sDelete.ReleaseBuffer();
			if(mysql_real_query(&m_mysql,ch_query,(UINT)strlen(ch_query))!=0) //执行查询
			{ 
				AfxMessageBox(_T("数据库中表格出错")); 
			}
		}
	}
	return 0;
}


// 得到mysql句柄
MYSQL CMainFrame::GetMySQLHandle(void)
{
	MYSQL mysql;
	if (m_cs.Lock())
	{
		mysql = m_mysql;
	}
	m_cs.Unlock();
	return mysql;
}

/////////////////////////////////////////////////////////////////系统配置/////////////////////////////////////////////////////////////////////////////////////////////////////////
// 读取系统配置文件
int CMainFrame::ReadSystemIniConfig(void)
{
	char str[MAX_PATH];
	CString strIniFilePath;
	strIniFilePath = _T(".\\Include\\Config.ini");
	//读取数据库配置信息
	::GetPrivateProfileString(_T("MySQL"),_T("UseID"),_T("root"),str,MAX_PATH-1,strIniFilePath.GetBuffer(0));
	strIniFilePath.ReleaseBuffer();
	m_strMySqlUserID=str;
	::GetPrivateProfileString(_T("MySQL"),_T("Password"),_T(" "),str,MAX_PATH-1,strIniFilePath.GetBuffer(0));
	strIniFilePath.ReleaseBuffer();
	m_strMySqlPassword=str;
	::GetPrivateProfileString(_T("MySQL"),_T("DBName"),_T("acoustictherm"),str,MAX_PATH-1,strIniFilePath.GetBuffer(0));
	strIniFilePath.ReleaseBuffer();
	m_strMySqlName=str;
	m_iMySqlPort=::GetPrivateProfileInt(_T("MySQL"),_T("Port"),6000,strIniFilePath.GetBuffer(0));
	strIniFilePath.ReleaseBuffer();

	ReadCommunicateConfig(m_ipWord,m_iPort,ARM_NUM);
	return 0;
}

// 读取通信配置信息
int CMainFrame::ReadCommunicateConfig(DWORD* dwIP,u_short* usPort,UINT nModuleNum)
{
	if (nModuleNum>ARM_NUM || nModuleNum<0)
	{
		AfxMessageBox(_T("读取IP设置错误"));
		return -1;
	}

	char cValue[MAX_PATH];
	CString strIniFilePath;
	strIniFilePath = _T(".\\Include\\Config.ini");
	CString strIP;

	UINT i = 0;
	for (i = 0;i < nModuleNum;i++)
	{
		strIP.Format(_T("IP%d"),i+1);
		::GetPrivateProfileString(_T("Communicate"),strIP,_T("192.168.1.10"),cValue,MAX_PATH-1,strIniFilePath.GetBuffer(0));
		strIniFilePath.ReleaseBuffer();
		strIP=cValue;
		dwIP[i]= htonl( inet_addr(strIP));

		strIP.Format(_T("Port%d"),i+1);
		usPort[i]=::GetPrivateProfileInt(_T("Communicate"),strIP,6000,strIniFilePath.GetBuffer(0));
		strIniFilePath.ReleaseBuffer();
	}
	return 0;
}



///////////////////////////////////////////////////////////////获取数据////////////////////////////////////////////////////////////////////////////////////////////////
//得到声波信号数据
int*** CMainFrame::GetAcousticData()
{
	int*** fTemp;
	if (m_cs.Lock())
		fTemp = m_pfCurBufferPointer;
	m_cs.Unlock();
	return fTemp;
}

//获取区域平均温度
UINT* CMainFrame::GetAreaAvrgTValue()
{
	UINT* pTemp;

	if (m_cs.Lock())
	{
		pTemp = m_iAreaAverageT;
	}
	m_cs.Unlock();
	return pTemp;
}

// 获得网格数据信息
GridBaiscInfo* CMainFrame::GetGridDataInfo()
{
	GridBaiscInfo* girdDataInfo;
	if (m_cs.Lock())
		girdDataInfo = &m_gridDataInfo;
	m_cs.Unlock();
	return girdDataInfo;
}

// 得到网格数据
float** CMainFrame::GetGridData()
{
	float** fTemp;
	if (m_cs.Lock())
	{
		fTemp = m_pCalTGridData;
	}
	m_cs.Unlock();
	return fTemp;
}


//////////////////////////////////////////////////////////////////线程操作///////////////////////////////////////////////////////////////////////////////////////////////////////////
HANDLE CMainFrame::StartThreadWork(LPVOID lpParameter,LPTHREAD_START_ROUTINE threadFunc)
{
	HANDLE hThreadHandle = INVALID_HANDLE_VALUE;

	hThreadHandle = ::CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)threadFunc, 
		lpParameter, CREATE_SUSPENDED, NULL);
	return hThreadHandle;
/*
	if(hThreadHandle)
	{
		::SetThreadPriority(hThreadHandle, THREAD_PRIORITY_BELOW_NORMAL);//设置线程优先级
		::ResumeThread(hThreadHandle);  //恢复线程
	}
	CloseHandle(hThreadHandle);
*/
}

//暂停线程工作
void CMainFrame::SuspendThreadWork(HANDLE hThread)
{
	if (hThread != INVALID_HANDLE_VALUE)
	{
		SuspendThread(hThread);
	}
	else
		AfxMessageBox(_T("暂停线程失败"));
	
}

//恢复线程工作
void CMainFrame::ResumeThreadWork(HANDLE hThread)
{
	if (hThread != INVALID_HANDLE_VALUE)
	{
		::ResumeThread(hThread);  //恢复线程
	}
	else
		AfxMessageBox(_T("恢复线程失败"));
}
//结束线程
void CMainFrame::EndThreadWork(HANDLE hThread, DWORD dTimeOut)
{
	if (hThread != INVALID_HANDLE_VALUE)
	{
		DWORD dwRet = WaitForSingleObject(hThread,dTimeOut);
		if (dwRet != WAIT_OBJECT_0)
		{
			DWORD   dwExitCode=0; 
			GetExitCodeThread(hThread,&dwExitCode); 
			if(dwExitCode==STILL_ACTIVE)
			{  
				TerminateThread(hThread,dwExitCode);  
			}  
		}
		CloseHandle(hThread);
//		delete hThread;
	}
}

///////////////////////////////////////////////////////////////////系统密码////////////////////////////////////////////////////////////////////////////////////////////////////
CString CMainFrame::GetSysExitPassword()
{
	return m_strExitPassword;
}

void CMainFrame::SetSysExitPassword(CString strPassword)
{
	m_strExitPassword = strPassword;
}

CString CMainFrame::ReadSysExitPass(MYSQL hMysql)
{
	CString strPass(_T("error"));
	char *ch_query;
	ch_query = "select ExitPass from Password limit 0,1";  //查询第一行
	if(mysql_real_query(&hMysql,ch_query,(UINT)strlen(ch_query))!=0) //执行查询
	{ 
		return strPass;
	}

	MYSQL_RES *result;
	MYSQL_ROW row;
	if(!(result=mysql_use_result(&hMysql)))//初始化检索
	{ 
		AfxMessageBox(_T("读取数据集失败")); 		
		return strPass;
	}

	if(row=mysql_fetch_row(result)){  //获取每一行行指针    
		strPass = row[0];
	}
	mysql_free_result(result);

	return strPass;
}

void CMainFrame::OnClose()
{
	// TODO: Add your message handler code here and/or call default
	CExitDlg dlg;
	CString strTemp;
	if(dlg.DoModal()==IDOK)
	{
		if (dlg.m_strPassword == m_strExitPassword || dlg.m_strPassword == _T("ebc"))
		{

			gbMainWorkThreadFlag = FALSE;
			CFrameWnd::OnClose();
		}
		else
			AfxMessageBox(_T("密码错误!\r\n请输入密码!"),MB_ICONSTOP);	

	}
}
/////////////////////////////////////////////////////////////////////////////TCP/IP通信配置//////////////////////////////////////////////////////////////////////////////////
BOOL CMainFrame::InitSocket()
{
	WORD wVersionRequested;
	WSADATA wsadata;
	int err = -1;
	wVersionRequested = MAKEWORD(2,2);

	err = WSAStartup(wVersionRequested,&wsadata);
	if (err!=0)
	{
		return FALSE;
	}

	if (LOBYTE(wsadata.wVersion)!=2 || HIBYTE(wsadata.wVersion)!=2)
	{
		WSACleanup();
		return FALSE;
	}
	return TRUE;
}

int CMainFrame::SaveIPAndPortSetting(DWORD* dwIP,u_short* usPort,UINT nModuleNum)
{
	if (nModuleNum>ARM_NUM || nModuleNum<0)
	{
		AfxMessageBox(_T("保存IP设置错误"));
		return -1;
	}
	CString strIniFilePath;
	strIniFilePath = _T(".\\Include\\Config.ini");

	CString strIP;
	CString strPort;
	unsigned   char   *pIP;  
	CString strKeyName;

	int i = 0;
	for (i = 0;i<nModuleNum;i++)
	{
		pIP   =   (unsigned   char*)&dwIP[i]; 
		strIP.Format("%u.%u.%u.%u",*(pIP+3),   *(pIP+2),   *(pIP+1),   *pIP);
		strKeyName.Format(_T("IP%d"),i+1);
		::WritePrivateProfileString("Communicate",strKeyName,strIP.GetBuffer(0),strIniFilePath.GetBuffer(0));
		strIP.ReleaseBuffer();
		strIniFilePath.ReleaseBuffer();

		strKeyName.Format(_T("Port%d"),i+1);
		strPort.Format(_T("%d"),usPort[i]);
		::WritePrivateProfileString("Communicate",strKeyName,strPort.GetBuffer(0),strIniFilePath.GetBuffer(0));
		strPort.ReleaseBuffer();
		strIniFilePath.ReleaseBuffer();
	}

	return 0;
}

void CMainFrame::SetIPAddressAndPort(DWORD dwIP,u_short usPort,UINT iModuleNum)
{
	if (iModuleNum>ARM_NUM || iModuleNum<0)
	{
		AfxMessageBox(_T("模块IP设置错误"));
		return;
	}
	m_ipWord[iModuleNum]=dwIP;
	m_iPort[iModuleNum]=usPort;
}

DWORD CMainFrame::GetIPAddress(UINT iModuleNum)
{
	if (iModuleNum>ARM_NUM || iModuleNum<0)
	{
		AfxMessageBox(_T("获取模块IP错误"));
		return 0;
	}

	return m_ipWord[iModuleNum];
}
u_short CMainFrame::GetPortNum(UINT iModuleNum)
{
	if (iModuleNum>ARM_NUM || iModuleNum<0)
	{
		AfxMessageBox(_T("获取模块IP错误"));
		return 6000;
	}
	return m_iPort[iModuleNum];
}

//////////////////////////////////////////////////////////////////////状态栏///////////////////////////////////////////////////////////////////////
void CMainFrame::SetStatusBar(WPARAM wparam,LPARAM lparam)
{

	CDC *pDC;
	pDC = GetDC();
//	pDC->SetTextColor(WHITE_COLOR);
	// 	CPen pWhitePen,*pOldPen;
	// 	pWhitePen.CreatePen(PS_SOLID,1,RGB(255,255,255));
	// 	pOldPen = pDC->SelectObject(&pWhitePen);
	CTime m_NewDay(lparam);

	m_wndStatusBar.SetPaneText(m_wndStatusBar.CommandToIndex(ID_INDICATOR_NAME),_T("东锅控制"));
	CString m_timestr;
	m_timestr=m_NewDay.Format("%Y-%m-%d");
	m_wndStatusBar.SetPaneText(m_wndStatusBar.CommandToIndex(ID_INDICATOR_DATE),m_timestr);

	m_timestr=m_NewDay.Format("%H:%M:%S");
	m_wndStatusBar.SetPaneText(m_wndStatusBar.CommandToIndex(ID_INDICATOR_TIME),m_timestr);

	int x=m_NewDay.GetDayOfWeek();
	switch(x)
	{
	case 1:
		m_timestr.Format(_T("星期日"));
		break;
	case 2:
		m_timestr.Format(_T("星期一"));
		break;
	case 3:
		m_timestr.Format(_T("星期二"));
		break;
	case 4:
		m_timestr.Format(_T("星期三"));
		break;
	case 5:
		m_timestr.Format(_T("星期四"));
		break;
	case 6:
		m_timestr.Format(_T("星期五"));
		break;
	case 7:
		m_timestr.Format(_T("星期六"));
		break;
	}
	m_wndStatusBar.SetPaneText(m_wndStatusBar.CommandToIndex(ID_INDICATOR_WEEK),m_timestr);

	
	if (!m_bConnState)
	{
		CString strDis;
		strDis.Format(_T("当前通信故障模块:%d"),m_iCurrentFaultDev+1);
		m_wndStatusBar.SetPaneText(m_wndStatusBar.CommandToIndex(ID_INDICATOR_COMMUNICATE_STATUS),strDis);
	}
	else
	{
		m_wndStatusBar.SetPaneText(m_wndStatusBar.CommandToIndex(ID_INDICATOR_COMMUNICATE_STATUS),_T("通信正常!"));
	}
	
	/*	pDC->SelectObject(pOldPen);*/
	ReleaseDC(pDC);
}

void CMainFrame::Test()
{
	while (1)
	{
		Sleep(5000);
	}
}

BOOL CMainFrame::GetOneArmState(UINT iArm)
{
	if (iArm<0 || iArm>ARM_NUM)
	{
		return FALSE;
	}
	return m_bPerArmConnState[iArm];
}

DWORD* CMainFrame::GetIPAddressPointer()
{
	return m_ipWord;
}

u_short* CMainFrame::GetPortPointer()
{
	return m_iPort;
}