// AreaAvrgTemperatureBmp.cpp : implementation file
//

#include "stdafx.h"
#include "AcousticTherm.h"
#include "AreaAvrgTemperatureBmp.h"

#include "commonFile.h"
#include "MainFrm.h"



// CAreaAvrgTemperatureBmp

IMPLEMENT_DYNAMIC(CAreaAvrgTemperatureBmp, CStatic)

CAreaAvrgTemperatureBmp::CAreaAvrgTemperatureBmp()
{
	m_AreaPoint = new AreaPoint[AREA_BLOCK_NUM];
	m_AreaColor = new COLORREF[AREA_BLOCK_NUM];
	m_iPerAreaT = new UINT[AREA_BLOCK_NUM];

	memset(m_AreaPoint,0,AREA_BLOCK_NUM*sizeof(AreaPoint));
	memset(m_AreaColor,0,AREA_BLOCK_NUM*sizeof(COLORREF));
	memset(m_iPerAreaT,0,AREA_BLOCK_NUM*sizeof(UINT));
}

CAreaAvrgTemperatureBmp::~CAreaAvrgTemperatureBmp()
{
	if (m_AreaPoint)
	{
		delete [] m_AreaPoint;
		m_AreaPoint = NULL;
	}
	
	if (m_AreaColor)
	{
		delete [] m_AreaColor;
		m_AreaColor = NULL;
	}

	if (m_iPerAreaT)
	{
 		delete [] m_iPerAreaT;
		m_iPerAreaT = NULL;
	}
}


BEGIN_MESSAGE_MAP(CAreaAvrgTemperatureBmp, CStatic)
	ON_WM_PAINT()
END_MESSAGE_MAP()



// CAreaAvrgTemperatureBmp message handlers




void CAreaAvrgTemperatureBmp::DisplayAreaAvrgT(WPARAM wparam, LPARAM lparam)
{
	CDC *pDC=GetDC();
	Draw(pDC,wparam,lparam);
	ReleaseDC(pDC);
}


void CAreaAvrgTemperatureBmp::Draw(CDC* pDc, WPARAM wparam, LPARAM lparam)
{
	CRect rClientRect;
	GetClientRect(rClientRect);

	CDC memDC;
	memDC.CreateCompatibleDC(pDc);

	if(m_Bmp.GetSafeHandle()==NULL)
		m_Bmp.CreateCompatibleBitmap(pDc,rClientRect.Width(),rClientRect.Height());

	CBitmap *pOldBmp;
	pOldBmp=memDC.SelectObject(&m_Bmp);

	CBrush backBrush(SYSTEM_COLOR);
	memDC.FillRect(rClientRect,&backBrush);  //填充显示区域背景色

	int nBkMode=memDC.SetBkMode(TRANSPARENT);

	/*****************************显示内容***********************************/
	PreDrawAreaAvrgT(rClientRect, wparam, lparam);
	DrawAreaAvrgT(&memDC,rClientRect);
	DrawAreaTText(&memDC,m_iPerAreaT);
	/************************************************************************/

	pDc->BitBlt(0,0,rClientRect.Width(),rClientRect.Height(),&memDC,0,0,SRCCOPY);

	memDC.SetBkMode(nBkMode);
	memDC.SelectObject(pOldBmp);
}


void CAreaAvrgTemperatureBmp::OnPaint()
{
	CPaintDC dc(this); // device context for painting

	// TODO: Add your message handler code here
	CDC memDC;
	CBitmap *pOldBmp;
	CRect rRect;

	memDC.CreateCompatibleDC(&dc);

	if(m_Bmp.GetSafeHandle())
	{
		dc.GetClipBox(rRect);
		pOldBmp=memDC.SelectObject(&m_Bmp);
		dc.BitBlt(rRect.left,rRect.top,rRect.Width(),rRect.Height(),&memDC,rRect.left,rRect.top,SRCCOPY);
		memDC.SelectObject(pOldBmp);	
	}	
}


void CAreaAvrgTemperatureBmp::DrawAreaAvrgT(CDC* pDc, CRect rRect)
{
	for (int i = 0; i < AREA_BLOCK_NUM;i++)
	{
		DrawOneAreaT( pDc, m_AreaPoint[i], m_AreaColor[i]);
	}
}


void CAreaAvrgTemperatureBmp::DrawFrame(CDC* pDc, CRect rRect)
{

}


void CAreaAvrgTemperatureBmp::DrawOneAreaT(CDC* pDc, AreaPoint point, COLORREF color)
{
	CBrush areaBrush(color),*pOldAreaBrush;
	CPen  areaPen,*pOldAreaPen;
	areaPen.CreatePen(PS_SOLID,1,RGB(255,255,255));

	pOldAreaPen = pDc->SelectObject(&areaPen);
	pOldAreaBrush = pDc->SelectObject(&areaBrush);

	pDc->Rectangle(CRect(point.startPoint,point.endPoint));

	pDc->SelectObject(pOldAreaBrush);
	pDc->SelectObject(pOldAreaPen);
}


void CAreaAvrgTemperatureBmp::PreDrawAreaAvrgT(CRect rRect, WPARAM wparam, LPARAM lparam)
{
	for (int i = 0;i<AREA_BLOCK_NUM;i++)
	{
		m_iPerAreaT[i] = ((UINT*)wparam)[i];
	}
	
	GetAreaCoor(m_AreaPoint,rRect); //获取坐标
	GetAreaColor(m_AreaColor);//获取颜色
}


// 获得每个区域坐标
void CAreaAvrgTemperatureBmp::GetAreaCoor(AreaPoint* areaPoint,CRect rRect)
{
	CRect rClientRect(rRect);

	int nWidth = rClientRect.Width()/4;
	int nHight = rClientRect.Height()/4;

	UINT i = 0;
	//for ( i = 0; i<AREA_BLOCK_NUM;i++)
	//{
	//	areaPoint[i].startPoint.x = rClientRect.left +( i %6)* nWidth;
	//	areaPoint[i].endPoint.x = areaPoint[i].startPoint.x + nWidth;

	//	areaPoint[i].startPoint.y = rClientRect.top +( i / 4)* nHight;
	//	areaPoint[i].endPoint.y = areaPoint[i].startPoint.y + nHight;
	//}

	UINT j = 0;
	for ( i = 0; i<4;i++)
	{
		for (j = 0; j < 4;j++)
		{
			areaPoint[i*4+j].startPoint.x = rClientRect.left +( j %4)* nWidth;
			areaPoint[i*4+j].endPoint.x = areaPoint[i*4+j].startPoint.x + nWidth;

			areaPoint[i*4+j].startPoint.y = rClientRect.top +( i % 4)* nHight;
			areaPoint[i*4+j].endPoint.y = areaPoint[i*4+j].startPoint.y + nHight;
		}
	}
}


// 获取区域对应的温度颜色
void CAreaAvrgTemperatureBmp::GetAreaColor(COLORREF* color)
{
	UINT i  = 0;
	BYTE rStart = GetRValue(START_COLOR);
	BYTE gStart = GetGValue(START_COLOR);
	BYTE bStart = GetBValue(START_COLOR);

	BYTE rEnd= GetRValue(END_COLOR);
	BYTE gEnd = GetGValue(END_COLOR);
	BYTE bEnd = GetBValue(END_COLOR);

	double rStep,gStep,bStep;
	rStep = (double)(rEnd-rStart)/(1500-100);
	gStep = (double)(gEnd-gStart)/(1500-100);
	bStep = (double)(bEnd-bStart)/(1500-100);

	BYTE r = 0,g = 0,b = 0;

	for (i = 0;i < AREA_BLOCK_NUM; i++)
	{
		r = rStart + m_iPerAreaT[i]*rStep;
		g = gStart + m_iPerAreaT[i]*gStep;
		b = bStart + m_iPerAreaT[i]*bStep;

		color[i] = RGB(r,g,b);
	}
}


void CAreaAvrgTemperatureBmp::DrawAreaTText(CDC* pDc,UINT* pBuffer)
{
	UINT i = 0;
	UINT x = 0;
	UINT y = 0;

	CString strTemp;

	for (i = 0; i < 24; i++)
	{
		
		x= m_AreaPoint[i].startPoint.x + (m_AreaPoint[i].endPoint.x - m_AreaPoint[i].startPoint.x)/2;
		y= m_AreaPoint[i].startPoint.y + (m_AreaPoint[i].endPoint.y - m_AreaPoint[i].startPoint.y)/2;
		strTemp.Format(_T("%d"),pBuffer[i]);
		pDc->TextOut(x,y,strTemp);
	}

}
